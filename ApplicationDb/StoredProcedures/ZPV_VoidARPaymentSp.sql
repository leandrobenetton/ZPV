/****** Object:  StoredProcedure [dbo].[ZPV_VoidARPaymentSp]    Script Date: 15/02/2015 05:20:58 p.m. ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZPV_VoidARPaymentSp]') AND type in (N'P', N'PC'))	
DROP PROCEDURE [dbo].[ZPV_VoidARPaymentSp]
GO

/****** Object:  StoredProcedure [dbo].[ZPV_VoidARPaymentSp]    Script Date: 15/02/2015 05:20:58 p.m. ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ZPV_VoidARPaymentSp] (
     @PayId         ZlaPayIdType
   , @Infobar       InfobarType OUTPUT
) AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZPV_VoidARPaymentSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname

      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZPV_VoidARPaymentSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
           @PayId
         , @Infobar OUTPUT
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.

declare  @CustNum          CustNumType
        ,@InvDate          DateType
        ,@BankCode         BankCodeType
        ,@CustCheckNum     ArCheckNumType
        ,@Amount           AmountType
        ,@Amount1          AmountType
        ,@Ref              RefType
        ,@PayType          CustPayTypeType
        ,@Type             ArTranTypeType
        ,@DueDate          DateType
        ,@Description      DescriptionType
        ,@CoNum            CoNumType
        ,@Cnt              Int        
        ,@CreditMemoNum    InvNumType
        ,@InvNum           InvNumType
        ,@CurrCode         CurrCodeType
        ,@ExchRate         ExchRateType
        ,@Pointer          RowPointer
        ,@Severity         Int
        ,@ParmsSite        SiteType
        ,@ZlaForAmtApplied AmountType
        ,@ZlaForAllowAmt   AmountType
        ,@ZlaForDiscAmt    AmountType
        ,@ZlaForNonArAmt   AmountType
        ,@DepositAcct      AcctType
        ,@DepositAcctUnit1 UnitCode1Type
        ,@DepositAcctUnit2 UnitCode2Type
        ,@DepositAcctUnit3 UnitCode3Type
        ,@DepositAcctUnit4 UnitCode4Type

SET @Severity = 0
SET @Infobar  = NULL

BEGIN TRANSACTION;
BEGIN TRY
	select @Cnt = count(*) from zla_ar_hdr where zla_ar_hdr.ar_pay_id = @PayId
									  and zla_ar_hdr.stat             = 'V'
	if @Cnt <> 0
	begin
		rollback transaction
		return @Severity
	end

	SELECT
	   @ParmsSite = site
	FROM parms WITH (READUNCOMMITTED)

	delete from arpmt  where zla_ar_pay_id = @PayId

	DECLARE OrdenPago CURSOR lOCAL STATIC FOR
	select 
		artran.cust_num
	,	artran.inv_date
	,	glbank.bank_code
	,	glbank.cust_check_num 
	,	-1 * artran.amount
	,	artran.ref
	,	artran.zla_ar_pay_id
	,	artran.pay_type
	,	artran.due_date
	,	artran.description
	,	artran.inv_num
	,	artran.zla_for_curr_code
	,	artran.zla_for_exch_rate
	,	-1 * artran.zla_for_amount
	,	-1 * artran.zla_for_disc_amt
	,	-1 * artran.zla_for_non_ar_amt
	,	artran.Type
	,	artran.co_num
	,	acct
	,	acct_unit1
	,	acct_unit2
	,	acct_unit3
	,	acct_unit4
	from glbank
	join artran on 
			artran.inv_seq	= glbank.cust_check_num
		and	artran.cust_num	= glbank.ref_num
	where zla_pay_id = @PayId
	OPEN OrdenPago
	WHILE 1 = 1
	BEGIN
	   FETCH OrdenPago 
	   INTO 
			@CustNum
		,	@InvDate
		,	@BankCode
		,	@CustCheckNum
		,	@Amount
		,	@Ref
		,	@PayId
		,	@PayType
		,	@DueDate
		,	@Description
		,	@CreditMemoNum
		,	@CurrCode
		,	@ExchRate
		,	@ZlaForAmtApplied
		,	@ZlaForDiscAmt
		,	@ZlaForNonArAmt
		,	@Type
		,	@CoNum
		,	@DepositAcct
		,	@DepositAcctUnit1
		,	@DepositAcctUnit2
		,	@DepositAcctUnit3
		,	@DepositAcctUnit4
	   IF @@FETCH_STATUS <> 0
		  BREAK
   
	   set @InvNum        = @CreditMemoNum
	   set @CreditMemoNum = null
	   select @Cnt = count(*) from arpmt
	   where arpmt.bank_code       = @BankCode
		 and arpmt.cust_num        = @CustNum
		 and arpmt.type            = @PayType
		 /*and arpmt.credit_memo_num = @CreditMemoNum*/
		 and arpmt.check_num       = @CustCheckNum
	   if @Cnt = 0
	   begin
		  print @CustCheckNum
		  delete from arpmtd
				where arpmtd.bank_code       = @BankCode
				  and arpmtd.cust_num        = @CustNum
				  and arpmtd.type            = @PayType
				  /*and arpmtd.credit_memo_num = @CreditMemoNum*/
				  and arpmtd.check_num       = @CustCheckNum

			-- Get New check Num, 
		EXEC @Severity = [dbo].[ZPV_GetNextCheckNumberSp]
			@BankCode,
			'D',
			@CustCheckNum OUTPUT
	 
	    select @CustCheckNum
		if @Severity <> 0
		begin
			rollback transaction
			RETURN @Severity
		end
       
	   		 -- END	   
		  insert into arpmt(cust_num,recpt_date,bank_code,check_num,dom_check_amt,ref,for_check_amt,
							zla_ar_pay_id,type,due_date,description)
		  values(@CustNum,@InvDate,@BankCode,@CustCheckNum ,0,@ref,0,
				 @PayId,@PayType,@DueDate,@Description)

		  INSERT INTO arpmtd (cust_num,check_num,inv_num,site,bank_code,dom_disc_amt,apply_cust_num,
							  for_disc_amt,zla_for_curr_code,zla_for_exch_rate,zla_for_disc_amt,Type,
							  disc_acct,disc_acct_unit1,disc_acct_unit2,disc_acct_unit3,disc_acct_unit4)        
		  select vend_num,check_num,voucher,from_site,bank_code,dom_amount,vend_num,dom_amount,curr_code,exch_rate,for_amount,@PayType,
				 acct,acct_unit1,acct_unit2,acct_unit3,acct_unit4
			from journal 
		   where journal.vend_num  = @CustNum
			 and journal.check_num = @CustCheckNum
			 and journal.voucher   like '-2%'
		  INSERT INTO arpmtd (cust_num,check_num,inv_num,site,bank_code,dom_disc_amt,apply_cust_num,
							  for_disc_amt,zla_for_curr_code,zla_for_exch_rate,zla_for_disc_amt,Type,
							  disc_acct,disc_acct_unit1,disc_acct_unit2,disc_acct_unit3,disc_acct_unit4)        
		  select vend_num,check_num,voucher,from_site,bank_code,dom_amount,vend_num,dom_amount,curr_code,exch_rate,for_amount,@PayType,
				 acct,acct_unit1,acct_unit2,acct_unit3,acct_unit4
			from ledger
		   where ledger.vend_num  = @CustNum
			 and ledger.check_num = @CustCheckNum
			 and ledger.voucher   like '-2%'
		   select @Amount1 = SUM(journal.dom_amount)
			 from journal 
		   where journal.vend_num  = @CustNum
			 and journal.check_num = @CustCheckNum
			 and journal.voucher   like '-2%'
		  if not @Amount1 is null
			 update arpmt set arpmt.dom_check_amt = arpmt.dom_check_amt + @Amount1,
							  arpmt.for_check_amt = arpmt.for_check_amt + @Amount1
				where arpmt.bank_code       = @BankCode
				  and arpmt.cust_num        = @CustNum
				  and arpmt.type            = @PayType
				  /*and arpmt.credit_memo_num = @CreditMemoNum*/
				  and arpmt.check_num       = @CustCheckNum   
		   select @Amount1 = SUM(ledger.dom_amount)
			 from ledger 
		   where ledger.vend_num  = @CustNum
			 and ledger.check_num = @CustCheckNum
			 and ledger.voucher   like '-2%'
		  if not @Amount1 is null
			 update arpmt set arpmt.dom_check_amt = arpmt.dom_check_amt + @Amount1,
							  arpmt.for_check_amt = arpmt.for_check_amt + @Amount1
				where arpmt.bank_code       = @BankCode
				  and arpmt.cust_num        = @CustNum
				  and arpmt.type            = @PayType
				  /*and arpmt.credit_memo_num = @CreditMemoNum*/
				  and arpmt.check_num       = @CustCheckNum
	   end 
	   update arpmt set arpmt.dom_check_amt = arpmt.dom_check_amt + @Amount,
						arpmt.for_check_amt = arpmt.for_check_amt + @Amount
	   where arpmt.bank_code       = @BankCode
		 and arpmt.cust_num        = @CustNum
		 and arpmt.type            = @PayType
		 /*and arpmt.credit_memo_num = @CreditMemoNum*/
		 and arpmt.check_num       = @CustCheckNum

	   insert into arpmtd(cust_num,check_num,inv_num,site,bank_code,dom_amt_applied,apply_cust_num,
						  for_amt_applied,zla_for_curr_code,zla_for_exch_rate,zla_for_amt_applied,
						  zla_for_allow_amt,zla_for_disc_amt,zla_for_non_ar_amt,Type,co_num,
						  deposit_acct,deposit_acct_unit1,deposit_acct_unit2,deposit_acct_unit3,deposit_acct_unit4)
			  values(@CustNum,@CustCheckNum,@InvNum,@ParmsSite,@BankCode,@Amount,@CustNum,
					 @Amount,@CurrCode,@ExchRate,@ZlaForAmtApplied,
					 @ZlaForAllowAmt,@ZlaForDiscAmt,@ZlaForNonArAmt,@PayType,@CoNum,
					 @DepositAcct,@DepositAcctUnit1,@DepositAcctUnit2,@DepositAcctUnit3,@DepositAcctUnit4)
	END

	DECLARE Pagos CURSOR lOCAL STATIC FOR
	select cust_num,bank_code,check_num,type,credit_memo_num
	from arpmt
	where zla_ar_pay_id = @PayId
	OPEN Pagos
	WHILE 1 = 1
	BEGIN
	   FETCH Pagos INTO @CustNum,@BankCode,@CustCheckNum,@PayType,@CreditMemoNum
	   IF @@FETCH_STATUS <> 0
		  BREAK

	  EXEC @Severity =  dbo.ZPV_ARPaymentPostingClearingSp 
					@PProcessId = @Pointer
				,	@PCustNum	= @CustNum
				,	@PBankCode	= @BankCode
				,	@PType		= @PayType
				,	@PCheckNum  = @CustCheckNum
				,	@PZlaArPayId	= @PayId
				,	@Infobar	= @Infobar OUTPUT

	  if @Severity <> 0
	  begin
			rollback transaction
			RETURN @Severity
	  end
	END
	SET @Severity = 0
END TRY
BEGIN CATCH
	SELECT 
         ERROR_NUMBER() AS ErrorNumber
        ,ERROR_SEVERITY() AS ErrorSeverity
        ,ERROR_STATE() AS ErrorState
        ,ERROR_PROCEDURE() AS ErrorProcedure
        ,ERROR_LINE() AS ErrorLine
        ,ERROR_MESSAGE() AS ErrorMessage;

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
	COMMIT TRANSACTION;
GO
