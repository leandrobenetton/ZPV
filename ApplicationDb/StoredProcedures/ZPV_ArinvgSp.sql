/****** Object:  StoredProcedure [dbo].[ZPV_ArinvgSp]    Script Date: 10/29/2014 12:24:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ZPV_ArinvgSp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ZPV_ArinvgSp]
GO

/****** Object:  StoredProcedure [dbo].[ZPV_ArinvgSp]    Script Date: 10/29/2014 12:24:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/* $Header: /ApplicationDB/Stored Procedures/ZLA_ArinvgSp.sp 25    3/04/10 10:13a Dahn $ */
/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2010 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
*************************************************************** 
*/
/* $Archive: /ApplicationDB/Stored Procedures/ZLA_ArinvgSp.sp $
 *
 * SL8.02 25 rs4588 Dahn Thu Mar 04 10:13:36 2010
 * RS4588 Copyright header changes
 *
 * SL8.02 24 rs4588 Dahn Wed Mar 03 17:16:37 2010
 * RS4588 Copyright header changes
 *
 * SL8.02 23 126762 pgross Fri Jan 15 13:32:37 2010
 * When generating distributions on the A/P Vouchers and Adjustments form, VAT is calculated to 4 decimal places instead of 2 decimal places causing the voucher total to be 4 decimal places.
 * round tmp_tax_calc.tax_amt
 *
 * SL8.01 22 rs3953 Vlitmano Tue Aug 26 16:39:09 2008
 * RS3953 - Changed a Copyright header?
 *
 * SL8.01 21 rs3953 Vlitmano Mon Aug 18 15:04:36 2008
 * Changed a Copyright header information(RS3959)
 *
 * SL8.01 20 RS4088 dgopi Tue May 20 06:49:22 2008
 * Making modifications as per RS4088
 *
 * SL8.00 19 103850 magler Mon Jul 23 14:12:05 2007
 * Updated ETPs
 *
 * SL8.00 18 RS3117 pjacob2 Wed Mar 07 05:57:14 2007
 * RS3117:for removing some references.
 *
 * SL8.00 17 rs2968 nkaleel Fri Feb 23 00:19:47 2007
 * changing copyright information
 *
 * SL8.00 16 RS2968 prahaladarao.hs Thu Jul 13 02:35:01 2006
 * RS 2968, Name change CopyRight Update.
 *
 * SL8.00 15 RS2968 prahaladarao.hs Tue Jul 11 03:50:59 2006
 * RS 2968
 * Name change CopyRight Update.
 *
 * SL8.00 14 91554 sivaprasad.b Thu Jun 01 02:36:09 2006
 * invoice number over 10 produces error even when length is set to 12
 * 91554
 * a. Changed ISNUMERIC(..) for invoice numbers to dbo.IsInteger(..)
 * b. Changed convert(integer, ...) for invoice numbers to convert(bigint, ... )
 *
 * SL7.05 13 91818 NThurn Fri Jan 06 13:59:24 2006
 * Inserted standard External Touch Point call.  (RS3177)
 *
 * $NoKeywords: $
 */
CREATE PROCEDURE [dbo].[ZPV_ArinvgSp] (
  @PArinv  RowPointerType
, @Infobar Infobar    OUTPUT
)
AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_ZPV_ArinvgSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_ZPV_ArinvgSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @PArinv
         , @Infobar OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
 
DECLARE
  @Severity INT

DECLARE
  @TDistSeq ArDistSeqType

SET @Severity = 0
SET @Infobar  = NULL

DECLARE
  @ParmsRowPointer         RowPointerType
, @TaxparmsRowPointer      RowPointerType
, @ArinvRowPointer         RowPointerType
, @ArinvPostFromCo         ListYesNoType
, @ArinvIncludeTaxInPrice  ListYesNoType
, @ArinvCustNum            CustNumType
, @ArinvInvNum             InvNumType
, @ArinvInvSeq             ArInvSeqType
, @ArinvAmount             AmountType
, @ArinvMiscCharges        AmountType
, @ArinvFreight            AmountType
, @ArinvTaxCode1           TaxCodeType
, @ArinvTaxCode2           TaxCodeType
, @ArinvInvDate            DateType
, @ArinvTermsCode          TermsCodeType
, @ArinvUseExchRate        ListYesNoType
, @ArinvExchRate           ExchRateType
, @ArinvSalesTax           AmountType
, @ArinvSalesTax2          AmountType
, @CustomerRowPointer      RowPointerType
, @CustomerEndUserType     EndUserTypeType
, @CustaddrRowPointer      RowPointerType
, @CustaddrCurrCode        CurrCodeType
, @CurrencyRowPointer      RowPointerType
, @CurrencyPlaces          DecimalPlacesType
, @ArinvdRowPointer        RowPointerType
, @ArinvdCustNum           CustNumType
, @ArinvdInvNum            InvNumType
, @ArinvdInvSeq            ArInvSeqType
, @ArinvdDistSeq           ArDistSeqType
, @ArinvdAmount            AmountType
, @ArinvdAcct              AcctType
, @ArinvdAcctUnit1         UnitCode1Type
, @ArinvdAcctUnit2         UnitCode2Type
, @ArinvdAcctUnit3         UnitCode3Type
, @ArinvdAcctUnit4         UnitCode4Type
, @ArinvdTaxSystem         TaxSystemType
, @ArinvdTaxCode           TaxCodeType
, @ArinvdTaxCodeE          TaxCodeType
, @ArinvdTaxBasis          AmountType
, @ArparmsRowPointer       RowPointerType
, @ArparmsFinAcct          AcctType
, @ArparmsFinAcctUnit1     UnitCode1Type
, @ArparmsFinAcctUnit2     UnitCode2Type
, @ArparmsFinAcctUnit3     UnitCode3Type
, @ArparmsFinAcctUnit4     UnitCode4Type
, @ArparmsSalesAcct        AcctType
, @ArparmsSalesAcctUnit1   UnitCode1Type
, @ArparmsSalesAcctUnit2   UnitCode2Type
, @ArparmsSalesAcctUnit3   UnitCode3Type
, @ArparmsSalesAcctUnit4   UnitCode4Type
, @ArparmsMiscAcct         AcctType
, @ArparmsMiscAcctUnit1    UnitCode1Type
, @ArparmsMiscAcctUnit2    UnitCode2Type
, @ArparmsMiscAcctUnit3    UnitCode3Type
, @ArparmsMiscAcctUnit4    UnitCode4Type
, @ArparmsFreightAcct      AcctType
, @ArparmsFreightAcctUnit1 UnitCode1Type
, @ArparmsFreightAcctUnit2 UnitCode2Type
, @ArparmsFreightAcctUnit3 UnitCode3Type
, @ArparmsFreightAcctUnit4 UnitCode4Type
, @EndtypeRowPointer       RowPointerType
, @EndtypeSalesAcct        AcctType
, @EndtypeSalesAcctUnit1   UnitCode1Type
, @EndtypeSalesAcctUnit2   UnitCode2Type
, @EndtypeSalesAcctUnit3   UnitCode3Type
, @EndtypeSalesAcctUnit4   UnitCode4Type
, @WTaxCalcRowPointer      RowPointerType
, @WTaxCalcRecordZero      Flag
, @WTaxCalcTaxAmt          AmountType
, @WTaxCalcTaxSystem       TaxSystemType
, @WTaxCalcTaxCode         TaxCodeType
, @WTaxCalcArAcct          AcctType
, @WTaxCalcArAcctUnit1     UnitCode1Type
, @WTaxCalcArAcctUnit2     UnitCode2Type
, @WTaxCalcArAcctUnit3     UnitCode3Type
, @WTaxCalcArAcctUnit4     UnitCode4Type
, @WTaxCalcTaxCodeE        TaxCodeType
, @WTaxCalcTaxBasis        AmountType
, @SessionId               RowPointerType
, @ReleaseTmpTaxTables     FlagNyType
, @xAmount                 AmountType
, @TaxAmount1              AmountType
, @TaxAmount2              AmountType

-- ZLA Vars
DECLARE
-- arinv
  @ArinvZlaForAmount			AmountType
, @ArinvZlaForMiscCharges	AmountType
, @ArinvZlaForFreight		AmountType
, @ArinvZlaForExchRate		ExchRateType
, @ArinvZlaForCurrCode		CurrCodeType
, @ArinvZlaForSalesTax		AmountType
, @ArinvZlaForSalesTax2		AmountType
, @ArinvZlaForFixedRate		ListYesNoType
-- arinvd
, @ArinvdZlaTaxSystem		TaxSystemsType
, @ArinvdZlaTaxCode			TaxCodeType
, @ArinvdZlaTaxAcct			AcctType
, @ArinvdZlaTaxAcctUnit1	UnitCode1Type
, @ArinvdZlaTaxAcctUnit2	UnitCode2Type
, @ArinvdZlaTaxAcctUnit3	UnitCode3Type
, @ArinvdZlaTaxAcctUnit4	UnitCode4Type
, @ArinvdZlaTaxAmount		AmountType
, @ArinvdZlaTaxBasis			AmountType
, @ArinvdZlaBaseDistSeq			ArDistSeqType
, @ArinvdZlaForAmount		AmountType
, @ArinvdZlaForTaxAmount	AmountType
, @ArinvdZlaForTaxBasis		AmountType

-- ZLA Declare Temp Table to Link Inv Dist and Tax Dist
DECLARE @ZlaTaxDist TABLE(
ArinvdRowPointer	uniqueidentifier
,TmpTaxCalcRowPointer	uniqueidentifier
)

DECLARE 
 @ZlaInvAmtRowPointer	RowPointerType
,@ZlaFreightAmtRowPointer	RowPointerType
,@ZlaMiscAmtRowPointer		RowPointerType
,@ZlaTmpSalesTax1			AmountType
,@ZlaTmpSalesTax2			AmountType


SET @ParmsRowPointer = NULL

SET @SessionId = dbo.SessionIDSp()

SELECT
  @ParmsRowPointer = parms.RowPointer
FROM parms with (readuncommitted)

IF @ParmsRowPointer IS NULL
   RETURN 0

SET @TaxparmsRowPointer = NULL

SELECT
   @TaxparmsRowPointer = taxparms.RowPointer
FROM taxparms with (readuncommitted)

IF @TaxparmsRowPointer IS NULL
   RETURN 0

SET @ArinvRowPointer  = NULL

SELECT
  @ArinvRowPointer        = arinv.RowPointer
, @ArinvPostFromCo        = arinv.post_from_co
, @ArinvIncludeTaxInPrice = arinv.include_tax_in_price
, @ArinvCustNum           = arinv.cust_num
, @ArinvInvNum            = arinv.inv_num
, @ArinvInvSeq            = arinv.inv_seq
, @ArinvAmount            = arinv.amount
, @ArinvMiscCharges       = arinv.misc_charges
, @ArinvFreight           = arinv.freight
, @ArinvTaxCode1          = arinv.tax_code1
, @ArinvTaxCode2          = arinv.tax_code2
, @ArinvInvDate           = arinv.inv_date
, @ArinvTermsCode         = arinv.terms_code
, @ArinvUseExchRate       = arinv.use_exch_rate
, @ArinvExchRate          = arinv.exch_rate
, @ArinvSalesTax          = arinv.sales_tax
, @ArinvSalesTax2         = arinv.sales_tax_2
-- ZLA
, @ArinvZlaForAmount			= arinv.zla_for_amount
, @ArinvZlaForMiscCharges	= arinv.zla_for_misc_charges
, @ArinvZlaForFreight		= arinv.zla_for_freight
, @ArinvZlaForExchRate		= arinv.zla_for_exch_rate
, @ArinvZlaForCurrCode		= arinv.zla_for_curr_code
, @ArinvZlaForSalesTax		= arinv.zla_for_sales_tax
, @ArinvZlaForSalesTax2		= arinv.zla_for_sales_tax_2
, @ArinvZlaForFixedRate		= arinv.zla_for_fixed_rate
FROM arinv WITH (UPDLOCK)
WHERE arinv.RowPointer = @PArinv

IF @ArinvPostFromCo = 1
BEGIN

   EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
                    , 'I=IsCompare3'
                    , '@arinv.post_from_co'
                    , '@:logical:yes'
                    , '@arinv'
                    , '@arinv.cust_num'
                    ,  @ArinvCustNum
                    , '@arinv.inv_num'
                    , @ArinvInvNum
                    , '@arinv.inv_seq'
                    , @ArinvInvSeq

   GOTO EXIT_SP

END

SET @CustomerRowPointer  = NULL

SELECT
  @CustomerRowPointer  = customer.RowPointer
, @CustomerEndUserType = customer.end_user_type
FROM customer with (readuncommitted)
WHERE customer.cust_num = @ArinvCustNum
AND   customer.cust_seq = 0

IF @CustomerRowPointer IS NULL
   GOTO EXIT_SP

SET @CustaddrRowPointer = NULL

SELECT
  @CustaddrRowPointer = custaddr.RowPointer
, @CustaddrCurrCode   = custaddr.curr_code
FROM custaddr with (readuncommitted)
WHERE custaddr.cust_num = @ArinvCustNum
AND   custaddr.cust_seq = 0

IF @CustaddrRowPointer IS NULL
   GOTO EXIT_SP

SET @CurrencyRowPointer = NULL

SELECT
  @CurrencyRowPointer = currency.RowPointer
, @CurrencyPlaces     = currency.places
FROM currency with (readuncommitted)
WHERE currency.curr_code = @CustaddrCurrCode

IF @CurrencyRowPointer IS NULL
   GOTO EXIT_SP


DELETE zla_arinvd_tax
WHERE cust_num = @ArinvCustNum
AND   inv_num  = @ArinvInvNum
AND   inv_seq  = @ArinvInvSeq

DELETE arinvd
WHERE arinvd.cust_num = @ArinvCustNum
AND   arinvd.inv_num  = @ArinvInvNum
AND   arinvd.inv_seq  = @ArinvInvSeq

SET @Severity = @@ERROR
IF @Severity <> 0
   GOTO EXIT_SP

SET @ArparmsRowPointer       = NULL

SELECT
  @ArparmsRowPointer       = arparms.RowPointer
, @ArparmsFinAcct          = arparms.fin_acct
, @ArparmsFinAcctUnit1     = arparms.fin_acct_unit1
, @ArparmsFinAcctUnit2     = arparms.fin_acct_unit2
, @ArparmsFinAcctUnit3     = arparms.fin_acct_unit3
, @ArparmsFinAcctUnit4     = arparms.fin_acct_unit4
, @ArparmsSalesAcct        = arparms.sales_acct
, @ArparmsSalesAcctUnit1   = arparms.sales_acct_unit1
, @ArparmsSalesAcctUnit2   = arparms.sales_acct_unit2
, @ArparmsSalesAcctUnit3   = arparms.sales_acct_unit3
, @ArparmsSalesAcctUnit4   = arparms.sales_acct_unit4
, @ArparmsMiscAcct         = arparms.misc_acct
, @ArparmsMiscAcctUnit1    = arparms.misc_acct_unit1
, @ArparmsMiscAcctUnit2    = arparms.misc_acct_unit2
, @ArparmsMiscAcctUnit3    = arparms.misc_acct_unit3
, @ArparmsMiscAcctUnit4    = arparms.misc_acct_unit4
, @ArparmsFreightAcct      = arparms.freight_acct
, @ArparmsFreightAcctUnit1 = arparms.freight_acct_unit1
, @ArparmsFreightAcctUnit2 = arparms.freight_acct_unit2
, @ArparmsFreightAcctUnit3 = arparms.freight_acct_unit3
, @ArparmsFreightAcctUnit4 = arparms.freight_acct_unit4
FROM arparms with (readuncommitted)

IF @ArparmsRowPointer IS NULL
BEGIN
   SET @Severity = 16
   GOTO EXIT_SP
END

SET @TDistSeq = 0

IF @ArinvAmount <> 0
BEGIN

   -- INITIALIZING VARS FOR TABLE INSERT
   SELECT
     @ArinvdTaxSystem  = NULL
   , @ArinvdTaxCode    = NULL
   , @ArinvdTaxCodeE   = NULL
   , @ArinvdTaxBasis   = (0)

   SET @TDistSeq      = @TDistSeq + 5
   SET @ArinvdCustNum = @ArinvCustNum
   SET @ArinvdInvNum  = @ArinvInvNum
   SET @ArinvdInvSeq  = @ArinvInvSeq
   SET @ArinvdDistSeq = @TDistSeq
   SET @ArinvdAmount  = @ArinvAmount

	SET @ArinvdZlaForAmount = @ArinvZlaForAmount
	SET @ZlaInvAmtRowPointer = NEWID()


   IF @ArinvInvNum = '-1'
   BEGIN
      SET @ArinvdAcct      = @ArparmsFinAcct
      SET @ArinvdAcctUnit1 = @ArparmsFinAcctUnit1
      SET @ArinvdAcctUnit2 = @ArparmsFinAcctUnit2
      SET @ArinvdAcctUnit3 = @ArparmsFinAcctUnit3
      SET @ArinvdAcctUnit4 = @ArparmsFinAcctUnit4
   END
   ELSE
   BEGIN
      SET @ArinvdAcct      = @ArparmsSalesAcct
      SET @ArinvdAcctUnit1 = @ArparmsSalesAcctUnit1
      SET @ArinvdAcctUnit2 = @ArparmsSalesAcctUnit2
      SET @ArinvdAcctUnit3 = @ArparmsSalesAcctUnit3
      SET @ArinvdAcctUnit4 = @ArparmsSalesAcctUnit4

      SET @EndtypeRowPointer     = NULL
 	  	
      SELECT
        @EndtypeRowPointer     = endtype.RowPointer
      , @EndtypeSalesAcct      = endtype.sales_acct
      , @EndtypeSalesAcctUnit1 = endtype.sales_acct_unit1
      , @EndtypeSalesAcctUnit2 = endtype.sales_acct_unit2
      , @EndtypeSalesAcctUnit3 = endtype.sales_acct_unit3
      , @EndtypeSalesAcctUnit4 = endtype.sales_acct_unit4
      FROM endtype with (readuncommitted)
      WHERE endtype.end_user_type = @CustomerEndUserType
	
      IF @EndtypeRowPointer IS NOT NULL
      BEGIN
         IF ISNULL(@EndtypeSalesAcct, '') <> ''
         BEGIN
            SET @ArinvdAcct      = @EndtypeSalesAcct
            SET @ArinvdAcctUnit1 = @EndtypeSalesAcctUnit1
            SET @ArinvdAcctUnit2 = @EndtypeSalesAcctUnit2
            SET @ArinvdAcctUnit3 = @EndtypeSalesAcctUnit3
            SET @ArinvdAcctUnit4 = @EndtypeSalesAcctUnit4
         END
      END -- IF @EndtypeRowPointer IS NOT NULL
   END -- ELSE

   INSERT INTO arinvd (
     cust_num
   , inv_num
	, inv_seq
   , dist_seq
   , amount
   , acct
   , acct_unit1
   , acct_unit2
   , acct_unit3
   , acct_unit4
   , tax_code
   , tax_basis
   , tax_system
   , tax_code_e
	, zla_for_amount
	, RowPointer
   )
   VALUES (
     @ArinvdCustNum
   , @ArinvdInvNum
	, @ArinvdInvSeq
   , @ArinvdDistSeq
   , @ArinvdAmount
   , @ArinvdAcct
   , @ArinvdAcctUnit1
   , @ArinvdAcctUnit2
   , @ArinvdAcctUnit3
   , @ArinvdAcctUnit4
   , @ArinvdTaxCode
   , @ArinvdTaxBasis
   , @ArinvdTaxSystem
   , @ArinvdTaxCodeE
	, @ArinvdZlaForAmount
	, @ZlaInvAmtRowPointer 

   )

   SET @Severity = @@Error
   IF @Severity <> 0
      GOTO EXIT_SP


END -- IF @ArinvAmount <> 0

IF @ArinvMiscCharges <> 0
BEGIN

   -- INITIALIZING VARS FOR TABLE INSERT
   SELECT
     @ArinvdTaxSystem  = NULL
   , @ArinvdTaxCode    = NULL
   , @ArinvdTaxCodeE   = NULL
   , @ArinvdTaxBasis   = (0)

   SET @TDistSeq        = @TDistSeq + 5
   SET @ArinvdCustNum   = @ArinvCustNum
   SET @ArinvdInvNum    = @ArinvInvNum
   SET @ArinvdInvSeq    = @ArinvInvSeq
   SET @ArinvdDistSeq   = @TDistSeq
   SET @ArinvdAcct      = @ArparmsMiscAcct
   SET @ArinvdAcctUnit1 = @ArparmsMiscAcctUnit1
   SET @ArinvdAcctUnit2 = @ArparmsMiscAcctUnit2
   SET @ArinvdAcctUnit3 = @ArparmsMiscAcctUnit3
   SET @ArinvdAcctUnit4 = @ArparmsMiscAcctUnit4
   SET @ArinvdAmount    = @ArinvMiscCharges

	SET @ArinvdZlaForAmount = @ArinvZlaForMiscCharges
	SET @ZlaMiscAmtRowPointer = NEWID()


   INSERT INTO arinvd (
     cust_num
   , inv_num
   , dist_seq
   , amount
   , acct
   , acct_unit1
   , acct_unit2
   , acct_unit3
   , acct_unit4
   , tax_code
   , tax_basis
   , tax_system
   , tax_code_e
	, zla_for_amount
	, RowPointer
   )
   VALUES (
     @ArinvdCustNum
   , @ArinvdInvNum
   , @ArinvdDistSeq
   , @ArinvdAmount
   , @ArinvdAcct
   , @ArinvdAcctUnit1
   , @ArinvdAcctUnit2
   , @ArinvdAcctUnit3
   , @ArinvdAcctUnit4
   , @ArinvdTaxCode
   , @ArinvdTaxBasis
   , @ArinvdTaxSystem
   , @ArinvdTaxCodeE
	, @ArinvdZlaForAmount
	, @ZlaMiscAmtRowPointer
   )

   SET @Severity = @@Error
   IF @Severity <> 0
      GOTO EXIT_SP

END -- IF @ArinvMiscCharges <> 0

IF @ArinvFreight <> 0
BEGIN

   -- INITIALIZING VARS FOR TABLE INSERT
   SELECT
     @ArinvdTaxSystem  = NULL
   , @ArinvdTaxCode    = NULL
   , @ArinvdTaxCodeE   = NULL
   , @ArinvdTaxBasis   = (0)

   SET @TDistSeq        = @TDistSeq + 5
   SET @ArinvdCustNum   = @ArinvCustNum
   SET @ArinvdInvNum    = @ArinvInvNum
   SET @ArinvdInvSeq    = @ArinvInvSeq
   SET @ArinvdDistSeq   = @TDistSeq
   SET @ArinvdAcct      = @ArparmsFreightAcct
   SET @ArinvdAcctUnit1 = @ArparmsFreightAcctUnit1
   SET @ArinvdAcctUnit2 = @ArparmsFreightAcctUnit2
   SET @ArinvdAcctUnit3 = @ArparmsFreightAcctUnit3
   SET @ArinvdAcctUnit4 = @ArparmsFreightAcctUnit4
   SET @ArinvdAmount    = @ArinvFreight

	SET @ArinvdZlaForAmount = @ArinvZlaForFreight
	SET @ZlaFreightAmtRowPointer = NEWID()

   INSERT INTO arinvd (
     cust_num
   , inv_num
   , dist_seq
   , amount
   , acct
   , acct_unit1
   , acct_unit2
   , acct_unit3
   , acct_unit4
   , tax_code
   , tax_basis
   , tax_system
   , tax_code_e
	, zla_for_amount   
	, RowPointer
)
   VALUES (
     @ArinvdCustNum
   , @ArinvdInvNum
   , @ArinvdDistSeq
   , @ArinvdAmount
   , @ArinvdAcct
   , @ArinvdAcctUnit1
   , @ArinvdAcctUnit2
   , @ArinvdAcctUnit3
   , @ArinvdAcctUnit4
   , @ArinvdTaxCode
   , @ArinvdTaxBasis
   , @ArinvdTaxSystem
   , @ArinvdTaxCodeE
	, @ArinvdZlaForAmount 
	, @ZlaFreightAmtRowPointer
   )

   SET @Severity = @@Error
   IF @Severity <> 0
      GOTO EXIT_SP

END -- IF @ArinvFreight <> 0

-- DON'T DISTRIBUTE SALES TAXES TO FINANCE CHARGES
IF not(dbo.IsInteger(@ArinvInvNum) = 1) or (dbo.IsInteger(@ArinvInvNum) = 1 and convert(BIGINT, @ArinvInvNum) >= 0)
BEGIN
   -- This session variable should not be defined at this point.
   EXEC dbo.UnDefineVariableSp 'TmpTaxTablesInUse' , @Infobar

   EXEC @Severity = dbo.UseTmpTaxTablesSp @SessionId, @ReleaseTmpTaxTables OUTPUT, @Infobar OUTPUT

   IF @ArinvIncludeTaxInPrice = 1
   BEGIN
      EXEC @Severity = dbo.TaxPriceSeparationSp
           @InvType                = 'AR'
         , @Type                   = 'I'
         , @TaxCode1               = @ArinvTaxCode1
         , @TaxCode2               = @ArinvTaxCode2
         , @HdrTaxCode1            = @ArinvTaxCode1
         , @HdrTaxCode2            = @ArinvTaxCode2

         , @Amount                 = @ArinvAmount
         , @UndiscAmount           = @ArinvAmount

         , @CurrCode               = @CustaddrCurrCode
         , @ExchRate               = @ArinvExchRate
         , @UseExchRate            = @ArinvUseExchRate
         , @Places                 = @CurrencyPlaces
         , @InvDate                = @ArinvInvDate
         , @TermsCode              = @ArinvTermsCode

         , @AmountWithoutTax       = @ArinvAmount OUTPUT
         , @UndiscAmountWithoutTax = @ArinvAmount OUTPUT
         , @Tax1OnAmount           = @TaxAmount1  OUTPUT
         , @Tax2OnAmount           = @TaxAmount2  OUTPUT
         , @Tax1OnUndiscAmount     = @xAmount     OUTPUT
         , @Tax2OnUndiscAmount     = @xAmount     OUTPUT
         , @Infobar                = @Infobar     OUTPUT

      IF @Severity <> 0
         RETURN @Severity

      UPDATE arinv
      SET amount = @ArinvAmount
        , include_tax_in_price = 0
      WHERE arinv.RowPointer = @ArinvRowPointer

      UPDATE arinvd
         SET amount = @ArinvAmount
      WHERE inv_num = @ArinvInvNum
        AND inv_seq = @ArinvInvSeq
        AND tax_system  IS NULL

   END -- IF @ArinvIncludeTaxInPrice = 1

   EXEC @Severity = dbo.TaxBaseSp
     @PInvType       = 'R'            -- A/R Mode
   , @PType          = 'I'             -- F Freight, M Misc chgs, I Line Items
   , @PTaxCode1      = @ArinvTaxCode1  -- not used in AR mode
   , @PTaxCode2      = @ArinvTaxCode2  -- not used in AR mode
   , @PAmount        = @ArinvAmount
   , @PAmountToApply = 0
   , @PUndiscAmount  = @ArinvAmount
   , @PUWsPrice      = NULL
   , @PTaxablePrice  = NULL
   , @PQtyInvoiced   = NULL
   , @PCurrCode      = NULL
   , @PInvDate       = NULL
   , @PExchRate      = NULL
   , @Infobar        = @Infobar OUTPUT
   , @pRefType       = 'AR'       
   , @pHdrPtr        = @PArinv    
   , @pLineRefType   = NULL       
   , @pLinePtr       = NULL

   IF @Severity <> 0
   BEGIN
      EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
                       , 'E=CmdFailed'
                       , '@%co/tax-base'
                       , '@arinv'
      GOTO EXIT_SP
   END -- IF @Severity <> 0
	
	-- ZLA Separate Invoice, Freight And Misc Tax calculation
	SET @ZlaTmpSalesTax1	= 0
	SET @ZlaTmpSalesTax2 = 0

   EXEC @Severity = dbo.TaxCalcSp
     @PInvType      = 'R'              -- AR Mode
   , @PTaxCode1     = @ArinvTaxCode1
   , @PTaxCode2     = @ArinvTaxCode2
   , @PFreight      = 0						-- ZLA @ArinvFreight
   , @PFrtTaxCode1  = NULL             -- N/A in AR mode
   , @PFrtTaxCode2  = NULL             -- N/A in AR mode
   , @PMisc         = 0						-- ZLA @ArinvMiscCharges
   , @PMiscTaxCode1 = NULL             -- N/A in AR mode
   , @PMiscTaxCode2 = NULL             -- N/A in AR mode
   , @PInvDate      = @ArinvInvDate
   , @PTermsCode    = @ArinvTermsCode
   , @PUseExchRate  = @ArinvUseExchRate
   , @PCurrCode     = @CustaddrCurrCode
   , @PPlaces       = @CurrencyPlaces
   , @PExchRate     = @ArinvExchRate
   , @PSalesTax1    = @ZlaTmpSalesTax1  OUTPUT
   , @PSalesTax2    = @ZlaTmpSalesTax2 OUTPUT
   , @Infobar       = @Infobar        OUTPUT
   , @pRefType      = 'AR'       	
   , @pHdrPtr       = @PArinv


   IF @Severity <> 0
   BEGIN
      EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
                       , 'E=CmdFailed'
                       , '@%co/tax-calc'
                       , '@arinv'

      GOTO EXIT_SP
   END -- IF @Severity <> 0

	INSERT INTO @ZlaTaxDist(ArinvdRowPointer,TmpTaxCalcRowPointer)
		SELECT @ZlaInvAmtRowPointer ,tmp.RowPointer 
			From tmp_tax_calc tmp 
				WHERE tmp.RowPointer NOT IN (Select RowPointer from @ZlaTaxDist)

	SET @ArinvSalesTax = @ArinvSalesTax + @ZlaTmpSalesTax1
	SET @ArinvSalesTax2 = @ArinvSalesTax2 + @ZlaTmpSalesTax2

	-- ZLA Misc Tax Calculation
	SET @ZlaTmpSalesTax1	= 0
	SET @ZlaTmpSalesTax2 = 0

   EXEC @Severity = dbo.TaxCalcSp
     @PInvType      = 'AR'              -- AR Mode
   , @PTaxCode1     = @ArinvTaxCode1
   , @PTaxCode2     = @ArinvTaxCode2
   , @PFreight      = 0						-- ZLA @ArinvFreight
   , @PFrtTaxCode1  = NULL             -- N/A in AR mode
   , @PFrtTaxCode2  = NULL             -- N/A in AR mode
   , @PMisc         = @ArinvMiscCharges
   , @PMiscTaxCode1 = NULL             -- N/A in AR mode
   , @PMiscTaxCode2 = NULL             -- N/A in AR mode
   , @PInvDate      = @ArinvInvDate
   , @PTermsCode    = @ArinvTermsCode
   , @PUseExchRate  = @ArinvUseExchRate
   , @PCurrCode     = @CustaddrCurrCode
   , @PPlaces       = @CurrencyPlaces
   , @PExchRate     = @ArinvExchRate
   , @PSalesTax1    = @ZlaTmpSalesTax1  OUTPUT
   , @PSalesTax2    = @ZlaTmpSalesTax2 OUTPUT
   , @Infobar       = @Infobar        OUTPUT
   , @pRefType      = 'AR'       	
   , @pHdrPtr       = @PArinv


   IF @Severity <> 0
   BEGIN
      EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
                       , 'E=CmdFailed'
                       , '@%co/tax-calc'
                       , '@arinv'

      GOTO EXIT_SP
   END -- IF @Severity <> 0
	

	INSERT INTO @ZlaTaxDist(ArinvdRowPointer,TmpTaxCalcRowPointer)
		SELECT @ZlaMiscAmtRowPointer ,tmp.RowPointer 
			From tmp_tax_calc tmp 
				WHERE tmp.RowPointer NOT IN (Select TmpTaxCalcRowPointer from @ZlaTaxDist tmp)

	SET @ArinvSalesTax = @ArinvSalesTax + @ZlaTmpSalesTax1
	SET @ArinvSalesTax2 = @ArinvSalesTax2 + @ZlaTmpSalesTax2

	-- ZLA Freight Tax Calculation
	SET @ZlaTmpSalesTax1	= 0
	SET @ZlaTmpSalesTax2 = 0

   EXEC @Severity = dbo.TaxCalcSp
     @PInvType      = 'AR'              -- AR Mode
   , @PTaxCode1     = @ArinvTaxCode1
   , @PTaxCode2     = @ArinvTaxCode2
   , @PFreight      = @ArinvFreight
   , @PFrtTaxCode1  = NULL             -- N/A in AR mode
   , @PFrtTaxCode2  = NULL             -- N/A in AR mode
   , @PMisc         = 0			    -- ZLA @ArinvMiscCharges
   , @PMiscTaxCode1 = NULL             -- N/A in AR mode
   , @PMiscTaxCode2 = NULL             -- N/A in AR mode
   , @PInvDate      = @ArinvInvDate
   , @PTermsCode    = @ArinvTermsCode
   , @PUseExchRate  = @ArinvUseExchRate
   , @PCurrCode     = @CustaddrCurrCode
   , @PPlaces       = @CurrencyPlaces
   , @PExchRate     = @ArinvExchRate
   , @PSalesTax1    = @ZlaTmpSalesTax1  OUTPUT
   , @PSalesTax2    = @ZlaTmpSalesTax2 OUTPUT
   , @Infobar       = @Infobar        OUTPUT
   , @pRefType      = 'AR'       	
   , @pHdrPtr       = @PArinv


   IF @Severity <> 0
   BEGIN
      EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
                       , 'E=CmdFailed'
                       , '@%co/tax-calc'
                       , '@arinv'

      GOTO EXIT_SP
   END -- IF @Severity <> 0
	

	INSERT INTO @ZlaTaxDist(ArinvdRowPointer,TmpTaxCalcRowPointer)
		SELECT @ZlaFreightAmtRowPointer ,tmp.RowPointer 
			From tmp_tax_calc tmp 
				WHERE tmp.RowPointer NOT IN (Select TmpTaxCalcRowPointer from @ZlaTaxDist)

	SET @ArinvSalesTax = @ArinvSalesTax + @ZlaTmpSalesTax1
	SET @ArinvSalesTax2 = @ArinvSalesTax2 + @ZlaTmpSalesTax2


	-- ZLA END Tax Calculation Separation

	-- Calculate Tax Total based on
		SET @ArinvZlaForSalesTax   = @ArinvSalesTax
      SET @ArinvZlaForSalesTax = @ArinvSalesTax2

	IF @CustaddrCurrCode <> @ArinvZlaForCurrCode 
		BEGIN
			-- Convert local amounts from Currency amounts (entered amounts)
			EXEC @Severity = dbo.CurrCnvtSp 
				@CurrCode = @ArinvZlaForCurrCode ,
				@FromDomestic = 1 , 
				@UseBuyRate = 0 , 
				@RoundResult = 1 , 
				@Date = NULL ,
				@TRate = @arinvZlaForExchRate OUTPUT , 
				@Infobar = @Infobar OUTPUT ,
				@Amount1 = @ArinvSalesTax , 
				@Result1 = @ArinvZlaForSalesTax2 OUTPUT , 
				@Amount2 = @ArinvSalesTax2 , 
				@Result2 = @ArinvZlaForSalesTax2 OUTPUT 
			
		END
		
 
   UPDATE arinv
      SET arinv.sales_tax   = @ArinvSalesTax
      ,   arinv.sales_tax_2 = @ArinvSalesTax2
			,arinv.zla_for_sales_tax = @ArinvZlaForSalesTax
			,arinv.zla_for_sales_tax_2 = @ArinvZlaForSalesTax2
   WHERE arinv.RowPointer = @ArinvRowPointer

   SET @Severity = @@ERROR
   IF @Severity <> 0
   BEGIN
      GOTO EXIT_SP
   END -- IF @Severity <> 0

   DECLARE TaxCalcCrs CURSOR LOCAL STATIC FOR
   SELECT
     tmp_tax_calc.RowPointer
   , tmp_tax_calc.record_zero
   , round(tmp_tax_calc.tax_amt, @CurrencyPlaces)
   , tmp_tax_calc.tax_system
   , tmp_tax_calc.tax_code
   , tmp_tax_calc.ar_acct
   , tmp_tax_calc.ar_acct_unit1
   , tmp_tax_calc.ar_acct_unit2
   , tmp_tax_calc.ar_acct_unit3
   , tmp_tax_calc.ar_acct_unit4
   , tmp_tax_calc.tax_code_e
   , tmp_tax_calc.tax_basis
	, TmpTax.ArinvdRowPointer
   FROM tmp_tax_calc
	INNER JOIN @ZlaTaxDist TmpTax ON TmpTax.TmpTaxCalcRowPointer = tmp_tax_calc.RowPointer
   WHERE tmp_tax_calc.ProcessId = @SessionId

   OPEN TaxCalcCrs
   WHILE @Severity = 0
   BEGIN
      FETCH TaxCalcCrs INTO
        @WTaxCalcRowPointer
      , @WTaxCalcRecordZero
      , @WTaxCalcTaxAmt
      , @WTaxCalcTaxSystem
      , @WTaxCalcTaxCode
      , @WTaxCalcArAcct
      , @WTaxCalcArAcctUnit1
      , @WTaxCalcArAcctUnit2
      , @WTaxCalcArAcctUnit3
      , @WTaxCalcArAcctUnit4
      , @WTaxCalcTaxCodeE
      , @WTaxCalcTaxBasis
		, @ArinvdRowPointer		-- Source Distribution RowPointer 
      IF @@FETCH_STATUS = -1
          BREAK

      IF @WTaxCalcRecordZero = 1 OR @WTaxCalcTaxAmt <> 0
      BEGIN

         IF @WTaxCalcRecordZero = 1 AND
            @WTaxCalcTaxAmt = 0     AND
            NOT EXISTS (SELECT 1 FROM taxcode with (readuncommitted)
                        WHERE taxcode.tax_system    = @WTaxCalcTaxSystem
                        AND   taxcode.tax_code_type = 'R'
                        AND   taxcode.tax_code      = @WTaxCalcTaxCode)
            CONTINUE

         SET @TDistSeq        = @TDistSeq + 5
         SET @ArinvdCustNum   = @ArinvCustNum
         SET @ArinvdInvNum    = @ArinvInvNum
         SET @ArinvdInvSeq    = @ArinvInvSeq
         SET @ArinvdDistSeq   = @TDistSeq
         SET @ArinvdAcct      = @WTaxCalcArAcct
         SET @ArinvdAcctUnit1 = @WTaxCalcArAcctUnit1
         SET @ArinvdAcctUnit2 = @WTaxCalcArAcctUnit2
         SET @ArinvdAcctUnit3 = @WTaxCalcArAcctUnit3
         SET @ArinvdAcctUnit4 = @WTaxCalcArAcctUnit4
         SET @ArinvdAmount    = @WTaxCalcTaxAmt
         SET @ArinvdTaxSystem = @WTaxCalcTaxSystem
         SET @ArinvdTaxCode   = @WTaxCalcTaxCode
         SET @ArinvdTaxCodeE  = @WTaxCalcTaxCodeE
         SET @ArinvdTaxBasis  = @WTaxCalcTaxBasis
			

			-- ZLA Convert Amounts to User Curr Code
			SET @ArinvdZlaForAmount = @ArinvdAmount
			SET @ArinvdZlaForTaxBasis = @ArinvdTaxBasis

			IF @CustaddrCurrCode <> @ArinvZlaForCurrCode 
			BEGIN
	
			-- Convert local amounts from Currency amounts (entered amounts)
				EXEC @Severity = dbo.CurrCnvtSp 
					@CurrCode = @ArinvZlaForCurrCode ,
					@FromDomestic = 1 , 
					@UseBuyRate = 0 , 
					@RoundResult = 1 , 
					@Date = NULL ,
					@TRate = @arinvZlaForExchRate OUTPUT , 
					@Infobar = @Infobar OUTPUT ,
					@Amount1 = @ArinvdAmount , 
					@Result1 = @ArinvdZlaForAmount OUTPUT , 
					@Amount2 = @ArinvdTaxBasis , 
					@Result2 = @ArinvdZlaForTaxBasis OUTPUT
					

			END

			-- ZLA SET Tax Fields to be copied into Source Dist
			SELECT @ArinvdZlaBaseDistSeq = dist_seq 
				FROM arinvd Where RowPointer = @ArinvdRowPointer

			SET @ArinvdZlaTaxSystem = @ArinvdTaxSystem
			SET @ArinvdZlaTaxCode	= @ArinvdTaxCode 
			SET @ArinvdZlaTaxAcct	= @ArinvdAcct
			SET @ArinvdZlaTaxAcctUnit1 = @ArinvdAcctUnit1 
 			SET @ArinvdZlaTaxAcctUnit2 = @ArinvdAcctUnit2 
			SET @ArinvdZlaTaxAcctUnit3 = @ArinvdAcctUnit3 
			SET @ArinvdZlaTaxAcctUnit4 = @ArinvdAcctUnit4 
			SET @ArinvdZlaTaxAmount		= @ArinvdAmount
			SET @ArinvdZlaTaxBasis		= @ArinvdTaxBasis


			
         INSERT INTO arinvd (
           cust_num
         , inv_num
         , dist_seq
         , amount
         , acct
         , acct_unit1
         , acct_unit2
         , acct_unit3
         , acct_unit4
         , tax_code
         , tax_basis
         , tax_system
      --   , tax_code_e
	    , zla_base_dist_seq
	    , zla_for_amount
	    , zla_for_tax_basis

         )
         VALUES (
           @ArinvdCustNum
         , @ArinvdInvNum
         , @ArinvdDistSeq
         , @ArinvdAmount
         , @ArinvdAcct
         , @ArinvdAcctUnit1
         , @ArinvdAcctUnit2
         , @ArinvdAcctUnit3
         , @ArinvdAcctUnit4
         , @ArinvdTaxCode
         , @ArinvdTaxBasis
         , @ArinvdTaxSystem
       --  , @ArinvdTaxCodeE
	    , @ArinvdZlaBaseDistSeq
	    , @ArinvdZlaForAmount 
	    , @ArinvdZlaForTaxBasis
         )

         SET @Severity = @@Error
         IF @Severity <> 0
         BEGIN
            CLOSE      TaxCalcCrs
            DEALLOCATE TaxCalcCrs
            GOTO EXIT_SP
         END

    -- ZLA Insert Default Customer Taxes for each tax distribution.
	INSERT INTO zla_arinvd_tax	(
						  cust_num
						,inv_num
						,inv_seq
						,dist_seq
						,tax_group_id
						)
						SELECT
							@ArinvdCustNum
						  ,@ArinvdInvNum
						  ,@ArinvdInvSeq
						  ,@ArinvdDistSeq
						  ,tax_group_id
						FROM
							zla_tax_customer
						WHERE
						cust_num = @ArinvCustNum
						AND cust_seq = 0
						AND [default] = 1
      END -- IF @WTaxCalcRecordZero = 1 OR @WTaxCalcTaxAmt <> 0

   END -- WHILE @Severity = 0

   CLOSE      TaxCalcCrs
   DEALLOCATE TaxCalcCrs
END -- IF (@ArinvInvNum = '0' or @ArinvInvNum = '-1' or @ArinvInvNum = '-2')

EXEC @Severity = dbo.ZLA_ArinvTaxCalcSp @ArinvCustNum,@ArinvInvNum,@ArinvInvSeq,@Infobar OUTPUT
 IF @Severity <> 0
   BEGIN
      EXEC @Severity = dbo.MsgAppSp @Infobar OUTPUT
                       , 'E=CmdFailed'
                       , '@%co/tax-calc'
                       , '@arinv'

      GOTO EXIT_SP
   END -- IF @Severity <> 0

EXEC dbo.MsgAppSp @Infobar OUTPUT
     , 'I=CmdSucceeded'
     , '@arinvd'


EXIT_SP:
IF @ReleaseTmpTaxTables = 1
   EXEC dbo.ReleaseTmpTaxTablesSp @SessionId

RETURN @Severity


GO

